;; CS571 Counts - Conceptual Dependency Shell
(setf (get 'atrans 'template) '(ATRANS ACTOR #\( AFILLER #\) OBJECT #\( OFILLER #\) TO #\( TFILLER #\) ))
(setf (get 'ptrans 'template) '(PTRANS ACTOR #\( AFILLER #\) TO #\( TFILLER #\) ))

; ptrans
(setf (get 'crawled 'category) 'ptrans)
(setf (get 'walked 'category) 'ptrans)
(setf (get 'ran 'category) 'ptrans)
(setf (get 'rode 'category) 'ptrans)
(setf (get 'flew 'category) 'ptrans)
(setf (get 'jumped 'category) 'ptrans)
(setf (get 'teleported 'category) 'ptrans)

; atrans
(setf (get 'gave 'category) 'atrans)
(setf (get 'take 'category) 'atrans)
(setf (get 'deliver 'category) 'atrans)
(setf (get 'reply 'category) 'atrans)
(setf (get 'sold 'category) 'atrans)
(setf (get 'paid 'category) 'atrans)


(defun prompt (message) 
    (terpri)
    (princ message)
    (princ " $ "))
(defun ack () (princ "OK"))

(defun main ()
    (prog
        (verb actor to object cd cat)

        ; get verb and retrieve category
        (prompt "VERB") (setq verb (read))
        (setq cat (get verb 'category))
        (ack)

        ; known or unknown?
        (cond 
            ;unknown
            (
                ;predicate
                (not cat)
                ; body
                (terpri) (princ "I don't know what that is.")
            )
            ;known
            (T
                ; body

                ; get the cd template
                (setq cd (get cat 'template))

                ; get actor
                (prompt "ACTOR") (setq actor (read))
                (setq cd (subst actor 'AFILLER cd))
                (ack)

                ; atrans?
                (when (eq 'atrans cat) 
                    ; get object
                    (prompt "OBJECT") (setq object (read))
                    (setq cd (subst object 'OFILLER cd))
                    (ack)
                )

                ; get target
                (prompt "TO") (setq to (read))
                (setq cd (subst to 'TFILLER cd))
                (ack)
            )
        )

        ; display CD if known; otherwise NIL
        (terpri)(princ cd)
    )
)

; bootstrapper
(main)